(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{434:function(t,e,a){"use strict";a.r(e);var i=a(27),s=Object(i.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("什么是版本库？版本库又名仓库，英文名"),a("code",[t._v("repository")]),t._v("，你可以简单理解成一个目录，这个目录里面所有文件都可以被Git管理起来，每个文件的修改、删除、Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。")]),t._v(" "),a("p",[t._v("所以，如何创建一个版本库呢？")]),t._v(" "),a("h2",{attrs:{id:"创建版本库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建版本库"}},[t._v("#")]),t._v(" 创建版本库")]),t._v(" "),a("ul",[a("li",[t._v("第一步，选择一个合适的地方，创建一个空目录：")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ mkdir learngit\n$ cd learngit\n$ pwd\n/f/learn/frontend/git/learngit\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("其中，"),a("code",[t._v("mkdir learngit")]),t._v("命令是创建文件夹learngit，"),a("code",[t._v("cd learngit")]),t._v("命令是进入文件夹learngit，"),a("code",[t._v("pwd")]),t._v("命令是显示当前路径。")]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("如果你使用Windows系统，为了避免到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文，")])]),t._v(" "),a("ul",[a("li",[t._v("第二步，通过"),a("code",[t._v("git init")]),t._v("命令把这个目录变成Git可以管理的仓库：")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git init\nInitialized empty Git repository in F:/learn/frontend/git/learngit/.git/\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("瞬间Git就把创库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的你可以发现当前目录下多了一个"),a("code",[t._v(".git")]),t._v("的目录，这个目录是Git来跟踪管理版本库的")]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库被破坏了。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("ul",[a("li",[t._v("如果你没有看到"),a("code",[t._v(".git")]),t._v("目录，那是因为这个目录默认是隐藏的，用"),a("code",[t._v("ls -ah")]),t._v("命令就可以看见。")]),t._v(" "),a("li",[t._v("你不仅可以在空目录下创建Git仓库，也可以在一个已经有东西的目录下创建Git仓库。")])])]),t._v(" "),a("h2",{attrs:{id:"什么文件可以添加到版本库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么文件可以添加到版本库"}},[t._v("#")]),t._v(" 什么文件可以添加到版本库")]),t._v(" "),a("p",[t._v("所有的版本控制系统，只能跟踪文本文件的改动，例如：TXT文件，网页，所有的程序代码等等，Git也不例外。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没办法跟踪文件的改动，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了200KB，但到底改了个啥，版本控制体统不知道，也没法知道。")]),t._v(" "),a("p",[t._v("不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没办法跟踪Word文件的改动的。")]),t._v(" "),a("p",[t._v("因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIs编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用用一种编码，即没有冲突，又被所有平台所支持。")]),t._v(" "),a("p",[t._v("但不要使用Windows自带的笔记本编辑任何文本文件，因为其开发团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载Notepad++代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可。")]),t._v(" "),a("img",{staticClass:"medium",attrs:{src:t.$withBase("/frontend/advanced/git/02_git-install/01_使用Notepad++代替记事本.png"),alt:"使用Notepad++代替记事本"}}),t._v(" "),a("p",[t._v("言归正传，我们现在编写一个"),a("code",[t._v("readme.txt")]),t._v("文件，内容如下：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Git is a version control system.\nGit is free software.\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("一定放到"),a("code",[t._v("learngit")]),t._v("的目录下（子目录也行）。因为这是一个Git仓库，放到别的地方Git再厉害也找不到这个文件。")]),t._v(" "),a("p",[t._v("把一个文件放到Git仓库只需要两步：")]),t._v(" "),a("ul",[a("li",[t._v("用命令"),a("code",[t._v("git add")]),t._v("告诉Git，把文件添加到仓库：")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git add readme.txt\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("执行上面的命令没有任何显示在，这就对了，说明添加成功。")]),t._v(" "),a("ul",[a("li",[t._v("用命令"),a("code",[t._v("git commit")]),t._v("告诉Git，把文件提交到仓库：")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git commit -m "write a readme file"\n[master (root-commit) af798d2] write a readme file\n 1 file changed, 2 insertions(+)\n create mode 100644 readme.txt\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("简单解释下"),a("code",[t._v("git commit")]),t._v("命令，"),a("code",[t._v("-m")]),t._v("后面输入的是本次提交的说明，可以输入任何内容，当然最后是后意义的，这样你可以从历史记录里方便地找到改动记录。")]),t._v(" "),a("p",[a("code",[t._v("git commit")]),t._v("命令执行成功后会告诉你，"),a("code",[t._v("1 file changed")]),t._v("：一个文件改动（我们新添加了readme.txt文件），"),a("code",[t._v("2 insertions")]),t._v("：插入了两行内容（readme.txt文件中有两行内容）。")]),t._v(" "),a("h2",{attrs:{id:"答疑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#答疑"}},[t._v("#")]),t._v(" 答疑")]),t._v(" "),a("ol",[a("li",[t._v("为什么Git添加文件需要"),a("code",[t._v("add")]),t._v("、"),a("code",[t._v("commit")]),t._v("两步呢？\n答：因为"),a("code",[t._v("commit")]),t._v("可以一次提交很多文件，所以你可以多次"),a("code",[t._v("add")]),t._v("不同的文件，比如：")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git add file1.txt\n$ git add file2.txt file3.txt\n$ git commit -m "add three files"\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("输入"),a("code",[t._v("git add readme.txt")]),t._v("后，得到的错误："),a("code",[t._v("fatal: not a git repository (or any of the parent directories): .git")]),t._v("。\n答：Git命令必须在Git仓库内执行（"),a("code",[t._v("git init")]),t._v("除外），在仓库外执行是没有意义的。")])]),t._v(" "),a("li",[a("p",[t._v("输入"),a("code",[t._v("git add readme.txt")]),t._v("，得到的错误"),a("code",[t._v("fatal: pathspec 'readme.txt' did not match any files")]),t._v("。\n答：添加某个文件时，该文件必须存在于当前目录下，用"),a("code",[t._v("ls")]),t._v("或"),a("code",[t._v("dir")]),t._v("命令查看当前目录下的文件，看看文件是否存在，或者是写错了文件名。")])])]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("今天学了两点内容：")]),t._v(" "),a("ul",[a("li",[t._v("初始化一个Git仓库，使用"),a("code",[t._v("git init")]),t._v("命令；")]),t._v(" "),a("li",[t._v("添加文件到Git仓库，分为两步：\n"),a("ol",[a("li",[t._v("使用命令"),a("code",[t._v("git add <file>")]),t._v("，注意：可以多次使用添加多个文件；")]),t._v(" "),a("li",[t._v("使用命令"),a("code",[t._v("git commit -m <message>")]),t._v("，完成；")])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);